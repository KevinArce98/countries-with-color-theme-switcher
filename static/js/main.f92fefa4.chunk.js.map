{"version":3,"sources":["hooks/useMedia.tsx","hooks/useDarkMode.tsx","hooks/useLocalStorage.tsx","components/FontAwesomeIcon.tsx","components/Header.tsx","components/Layout.tsx","services/Country.tsx","pages/DetailCountry.tsx","components/CountryCard.tsx","components/Loading.tsx","pages/Home.tsx","config/theme.tsx","App.tsx","index.tsx"],"names":["useMedia","queries","values","defaultValue","mediaQueryLists","map","q","window","matchMedia","getValue","index","findIndex","mql","matches","useState","value","setValue","useEffect","handler","forEach","addListener","removeListener","usePrefersDarkMode","useDarkMode","key","initialValue","item","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","enabledState","setEnabledState","prefersDarkMode","enabled","className","element","document","body","classList","add","remove","FontAwesomeIcon","type","iconName","style","styles","Header","darkMode","setDarkMode","AppBar","position","color","Toolbar","Typography","variant","Button","onClick","Layout","children","API","axios","create","baseURL","process","getAllCountries","a","get","result","status","data","getCountryByAlphaCode","alphaCode","DetailCountry","theme","useTheme","isMobile","useMediaQuery","breakpoints","up","defaultMatches","country","setCountry","params","useParams","getData","Grid","container","spacing","xs","to","fontSize","md","src","flag","alt","name","nativeName","topLevelDomain","Intl","NumberFormat","format","population","currencies","c","join","region","languages","l","subregion","capital","borders","countryLimit","size","CountryCard","alpha3Code","Card","CardActionArea","CardMedia","image","title","CardContent","gutterBottom","component","Loading","Paper","CircularProgress","Home","countries","setCountries","searchValue","setSearchValue","regionSelected","setRegionSelected","isLoading","setIsLoading","stateCountries","useRef","gettingData","current","TextField","id","label","fullWidth","onChange","e","target","countriesFiltered","filter","toLowerCase","includes","InputProps","startAdornment","InputAdornment","FormControl","InputLabel","Select","labelId","MenuItem","lg","createTheme","typography","fontFamily","App","ThemeProvider","path","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f92fefa4.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\n\r\nfunction useMedia<T>(queries: string[], values: T[], defaultValue: T) {\r\n    // Array containing a media query list for each query\r\n    const mediaQueryLists = queries.map((q) => window.matchMedia(q));\r\n    // Function that gets value based on matching media query\r\n    const getValue = () => {\r\n        // Get index of first media query that matches\r\n        const index = mediaQueryLists.findIndex((mql) => mql.matches);\r\n        // Return related value or defaultValue if none\r\n        return values?.[index] || defaultValue;\r\n    };\r\n    // State and setter for matched value\r\n    const [value, setValue] = useState<T>(getValue);\r\n    useEffect(\r\n        () => {\r\n            // Event listener callback\r\n            // Note: By defining getValue outside of useEffect we ensure that it has ...\r\n            // ... current values of hook args (as this hook callback is created once on mount).\r\n            const handler = () => setValue(getValue);\r\n            // Set a listener for each media query with above handler as callback.\r\n            mediaQueryLists.forEach((mql) => mql.addListener(handler));\r\n            // Remove listeners on cleanup\r\n            return () =>\r\n                mediaQueryLists.forEach((mql) => mql.removeListener(handler));\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        }, [] // Empty array ensures effect is only run on mount and unmount\r\n    );\r\n    return value;\r\n};\r\n\r\nexport default useMedia;","import { useEffect } from \"react\";\r\nimport useLocalStorage from \"./useLocalStorage\";\r\nimport useMedia from \"./useMedia\";\r\n\r\nconst useDarkMode = (): [boolean, (value: boolean) => void] => {\r\n\r\n    const [enabledState, setEnabledState] = useLocalStorage<boolean>(\"dark-mode-enabled\", false);\r\n\r\n    // See if user has set a browser or OS preference for dark mode.\r\n    // The usePrefersDarkMode hook composes a useMedia hook (see code below).\r\n    const prefersDarkMode = usePrefersDarkMode();\r\n    // If enabledState is defined use it, otherwise fallback to prefersDarkMode.\r\n    // This allows user to override OS level setting on our website.\r\n    const enabled = enabledState ?? prefersDarkMode;\r\n    // Fire off effect that add/removes dark mode class\r\n    useEffect(\r\n        () => {\r\n            const className = \"dark-mode\";\r\n            const element = window.document.body;\r\n            if (enabled) {\r\n                element.classList.add(className);\r\n            } else {\r\n                element.classList.remove(className);\r\n            }\r\n        },\r\n        [enabled] // Only re-call effect when value changes\r\n    );\r\n    // Return enabled state and setter\r\n    return [enabled, setEnabledState];\r\n}\r\n\r\nconst usePrefersDarkMode = () => {\r\n    return useMedia(['(prefers-color-scheme: dark)'], [true], false);\r\n}\r\n\r\nexport default useDarkMode","import { useState } from 'react';\r\n\r\nexport default function useLocalStorage<T>(key: string, initialValue: T) {\r\n    // State to store our value\r\n    // Pass initial state function to useState so logic is only executed once\r\n    const [storedValue, setStoredValue] = useState<T>(() => {\r\n        try {\r\n            // Get from local storage by key\r\n            const item = window.localStorage.getItem(key);\r\n            // Parse stored json or if none return initialValue\r\n            return item ? JSON.parse(item) : initialValue;\r\n        } catch (error) {\r\n            // If error also return initialValue\r\n            console.log(error);\r\n            return initialValue;\r\n        }\r\n    });\r\n    // Return a wrapped version of useState's setter function that ...\r\n    // ... persists the new value to localStorage.\r\n    const setValue = (value: T | ((val: T) => T)) => {\r\n        try {\r\n            // Allow value to be a function so we have same API as useState\r\n            const valueToStore =\r\n                value instanceof Function ? value(storedValue) : value;\r\n            // Save state\r\n            setStoredValue(valueToStore);\r\n            // Save to local storage\r\n            window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n        } catch (error) {\r\n            // A more advanced implementation would handle the error case\r\n            console.log(error);\r\n        }\r\n    };\r\n    return [storedValue, setValue] as const;\r\n}\r\n","\r\ninterface Props {\r\n    type: 'fab' | 'fal' | 'fas' | 'fad' | 'far';\r\n    iconName: string;\r\n    className?: string;\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nconst FontAwesomeIcon = ({ type, iconName, className, style}: Props) => {\r\n\r\n    const styles = style ? style : {};\r\n\r\n    return (\r\n        <i className={`${type} ${iconName} ${className}`} style={{ ...styles }}></i>\r\n    )\r\n}\r\n\r\nexport default FontAwesomeIcon\r\n","// Hooks\r\nimport useDarkMode from '../hooks/useDarkMode';\r\n\r\n// Components\r\nimport { AppBar, Button, Toolbar, Typography } from '@material-ui/core';\r\nimport FontAwesomeIcon from './FontAwesomeIcon';\r\n\r\nconst Header = () => {\r\n\r\n    const [darkMode, setDarkMode] = useDarkMode();\r\n\r\n    return (\r\n        <AppBar position=\"static\" color=\"default\" className=\"header\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" className=\"title\">\r\n                    Where in the world?\r\n                </Typography>\r\n\r\n                <Button onClick={() => setDarkMode(!darkMode)} className=\"switch\">\r\n                    <FontAwesomeIcon iconName=\"fa-moon\" type={darkMode ? 'fas' : 'fal'} className=\"mr-2\" /> Dark Mode\r\n                </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","// Components\r\nimport Header from \"./Header\"\r\n\r\nconst Layout = ({ children }: any) => {\r\n    return (\r\n        <>\r\n            <Header />\r\n            {children}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Layout\r\n","import axios from \"axios\";\r\nimport Country from \"../interfaces/Country.interface\";\r\n\r\nconst baseURL = process.env.REACT_APP_COUNTRIES_URL_API;\r\n\r\nconst API = axios.create({\r\n    baseURL\r\n});\r\n\r\nexport const getAllCountries = async (): Promise<Country[] | null> => {\r\n    try {\r\n        const result = await API.get(`/all`);\r\n        if (result.status === 200 && result.data) {\r\n            return result.data;\r\n        }\r\n        return [];\r\n    } catch (error) {\r\n        console.log(error);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const getCountryByAlphaCode = async (alphaCode: string): Promise<Country | null> => {\r\n    try {\r\n        const result = await API.get(`/alpha/${alphaCode}`);\r\n        if (result.status === 200 && result.data) {\r\n            return result.data;\r\n        }\r\n        return null;\r\n    } catch (error) {\r\n        console.log(error);\r\n        return null;\r\n    }\r\n\r\n}","// Hooks\r\nimport { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport useTheme from '@material-ui/core/styles/useTheme';\r\n\r\n// Components\r\nimport { Button, Grid, Typography } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport FontAwesomeIcon from \"../components/FontAwesomeIcon\";\r\n\r\n// Services\r\nimport { getCountryByAlphaCode } from \"../services/Country\";\r\nimport Country from \"../interfaces/Country.interface\";\r\n\r\nconst DetailCountry = () => {\r\n\r\n    const theme = useTheme();\r\n    const isMobile = useMediaQuery(theme.breakpoints.up('sm'), {\r\n        defaultMatches: true\r\n    });\r\n\r\n    const [country, setCountry] = useState<Country | null>(null);\r\n    const params = useParams<any>();\r\n\r\n    useEffect(() => {\r\n        getData();\r\n        // eslint-disable-next-line\r\n    }, [params.alphaCode]);\r\n\r\n    const getData = async () => {\r\n        const result = await getCountryByAlphaCode(params.alphaCode);\r\n        setCountry(result);\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={isMobile ? 8 : 2} className=\"md:p-16 p-5\">\r\n            <Grid item xs={12}>\r\n                <Link to=\"/\">\r\n                    <Button variant=\"contained\" color=\"default\">\r\n                        <FontAwesomeIcon type=\"far\" iconName=\"fa-long-arrow-alt-left\" className=\"mr-2\" style={{ fontSize: 20 }} />\r\n                        Back\r\n                    </Button>\r\n                </Link>\r\n            </Grid>\r\n            {\r\n                country &&\r\n                <>\r\n                    <Grid item xs={12} md={6}>\r\n                        <img src={country.flag} alt={country.name} />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6} className=\"details\">\r\n                        <Typography variant=\"h4\" className=\"title\">{country.name}</Typography>\r\n                        <Grid container spacing={0}>\r\n                            <Grid item xs={12} md={6}>\r\n                                <Typography className=\"subtitle\">\r\n                                    <span className=\"font-semibold\">Native Name:</span> {country.nativeName}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <Typography className=\"subtitle\">\r\n                                    <span className=\"font-semibold\">Top Level Domain:</span> {country.topLevelDomain}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <Typography className=\"subtitle\">\r\n                                    <span className=\"font-semibold\">Population:</span> {new Intl.NumberFormat().format(country.population)}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <Typography className=\"subtitle\">\r\n                                    <span className=\"font-semibold\">Currencies:</span> {country.currencies.map(c => c.name).join(', ')}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <Typography className=\"subtitle\">\r\n                                    <span className=\"font-semibold\">Region:</span> {country.region}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <Typography className=\"subtitle\">\r\n                                    <span className=\"font-semibold\">Languages:</span> {country.languages.map(l => l.name).join(', ')}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={12}>\r\n                                <Typography className=\"subtitle\">\r\n                                    <span className=\"font-semibold\">Sub Region:</span> {country.subregion}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={12}>\r\n                                <Typography className=\"subtitle\">\r\n                                    <span className=\"font-semibold\">Capital:</span> {country.capital}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <div className=\"mt-20 md:flex items-center\">\r\n                            <Typography className=\"subtitle w-48\">\r\n                                <span className=\"font-semibold\">Border Countries:</span>\r\n                            </Typography>\r\n                            <div className=\"countries-borders flex overflow-x-auto w-full pb-1\">\r\n                                {\r\n                                    country.borders.map(countryLimit => (\r\n                                        <div key={countryLimit} className=\"ml-3\">\r\n                                            <Link to={`/details/${countryLimit}`}>\r\n                                                <Button className=\"mr-2\" variant=\"contained\" size=\"small\">\r\n                                                    {countryLimit}\r\n                                                </Button>\r\n                                            </Link>\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </Grid>\r\n                </>\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default DetailCountry\r\n","// Components\r\nimport { Card, CardActionArea, CardContent, CardMedia, Typography } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Interfaces\r\nimport Country from \"../interfaces/Country.interface\";\r\n\r\ninterface Props {\r\n    country: Country;\r\n}\r\n\r\nconst CountryCard = ({ country }: Props) => {\r\n    return (\r\n        <Link to={`/details/${country.alpha3Code}`}>\r\n            <Card>\r\n                <CardActionArea>\r\n                    <CardMedia\r\n                        image={country.flag}\r\n                        title={country.name}\r\n                        className=\"h-60\"\r\n                    />\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h6\" component=\"h5\">\r\n                            <strong>{country.name}</strong>\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            <strong>Population:</strong> {country.population}\r\n                        </Typography>\r\n\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            <strong>Region:</strong> {country.region}\r\n                        </Typography>\r\n\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            <strong>Capital:</strong> {country.capital}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n            </Card>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default CountryCard\r\n","import { CircularProgress, Paper } from \"@material-ui/core\"\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <Paper className=\"px-5 py-2 w-full\">\r\n            <div className=\"flex items-center\">\r\n                <CircularProgress color=\"secondary\"/>\r\n                <p className=\"ml-5 font-black\">Loading...</p>\r\n            </div>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default Loading\r\n","// Hooks\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport useTheme from '@material-ui/core/styles/useTheme';\r\n\r\n// Components\r\nimport { FormControl, Grid, InputAdornment, InputLabel, MenuItem, Select, TextField } from \"@material-ui/core\";\r\n\r\n// Interfaces\r\nimport Country from \"../interfaces/Country.interface\";\r\n\r\n// Services\r\nimport { getAllCountries } from \"../services/Country\";\r\nimport CountryCard from \"../components/CountryCard\";\r\nimport FontAwesomeIcon from \"../components/FontAwesomeIcon\";\r\nimport Loading from \"../components/Loading\";\r\n\r\n\r\nconst Home = () => {\r\n\r\n    const theme = useTheme();\r\n    const isMobile = useMediaQuery(theme.breakpoints.up('sm'), {\r\n        defaultMatches: true\r\n    });\r\n\r\n    const [countries, setCountries] = useState<Country[]>([]);\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [regionSelected, setRegionSelected] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const stateCountries = useRef<Country[]>([]);\r\n\r\n    useEffect(() => {\r\n        gettingData();\r\n    }, []);\r\n\r\n    const gettingData = async () => {\r\n        setIsLoading(true);\r\n        const result = await getAllCountries();\r\n        if (result) {\r\n            setCountries(result);\r\n            stateCountries.current = result;\r\n        }\r\n        setIsLoading(false);\r\n    }\r\n\r\n    const searchingCountries = (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        setIsLoading(true);\r\n        const { value } = e.target;\r\n        setSearchValue(value);\r\n        const countriesFiltered = stateCountries.current.filter(country => {\r\n            if (regionSelected) {\r\n                return country.name.toLowerCase().includes(value.toLowerCase()) && country.region === regionSelected;\r\n            }\r\n            return country.name.toLowerCase().includes(value.toLowerCase());\r\n        });\r\n        setCountries(countriesFiltered);\r\n        setIsLoading(false);\r\n    }\r\n\r\n    const handleChangeFilterByRegion = (e: React.ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n        setIsLoading(true);\r\n        const region: any = e.target.value;\r\n        setRegionSelected(region);\r\n\r\n        if (region) {\r\n            const countriesFiltered = stateCountries.current.filter(country => {\r\n                if (searchValue) {\r\n                    return country.region === region && country.name.toLowerCase().includes(searchValue.toLowerCase())\r\n                }\r\n                return country.region === region;\r\n            });\r\n            setCountries(countriesFiltered);\r\n        }\r\n        else {\r\n            let countriesFiltered = stateCountries.current;\r\n            if (searchValue) {\r\n                countriesFiltered = stateCountries.current.filter(country => {\r\n                    return country.name.toLowerCase().includes(searchValue.toLowerCase());\r\n                });\r\n            }\r\n            setCountries(countriesFiltered);\r\n        }\r\n        setIsLoading(false);\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={isMobile ? 8 : 2} className=\"md:p-16 p-5\">\r\n            <Grid item xs={12} md={6}>\r\n                <TextField\r\n                    id=\"search\"\r\n                    label=\"Search for a country...\"\r\n                    variant=\"filled\"\r\n                    fullWidth\r\n                    onChange={searchingCountries}\r\n                    value={searchValue}\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                                <FontAwesomeIcon type=\"fal\" iconName=\"fa-search\" />\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12} md={6} className=\"md:text-right\">\r\n                <FormControl variant=\"filled\" className=\"w-44\">\r\n                    <InputLabel id=\"filter-region-label\">Filter by Region</InputLabel>\r\n                    <Select\r\n                        labelId=\"filter-region-label\"\r\n                        id=\"filter-region\"\r\n                        value={regionSelected}\r\n                        onChange={handleChangeFilterByRegion}\r\n                    >\r\n                        <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                        </MenuItem>\r\n                        <MenuItem value=\"Africa\">Africa</MenuItem>\r\n                        <MenuItem value=\"Americas\">Americas</MenuItem>\r\n                        <MenuItem value=\"Asia\">Asia</MenuItem>\r\n                        <MenuItem value=\"Europe\">Europe</MenuItem>\r\n                        <MenuItem value=\"Oceania\">Oceania</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n\r\n            {\r\n                isLoading ?\r\n                    <Loading />\r\n                    :\r\n                    countries.map(country => (\r\n                        <Grid item xs={12} md={4} lg={3} key={country.alpha3Code}>\r\n                            <CountryCard\r\n                                country={country}\r\n                            />\r\n                        </Grid>\r\n                    ))\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import { createTheme } from \"@material-ui/core\";\r\n\r\nconst theme = createTheme({\r\n    typography: {\r\n        fontFamily: 'NunitoSans',\r\n    }\r\n});\r\n\r\nexport default theme;","import './assets/css/all.min.css';\nimport './assets/css/general.css';\nimport './assets/css/tailwind.output.css';\n\n// Components\nimport { ThemeProvider } from '@material-ui/styles';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Layout from './components/Layout';\n\n// Pages\nimport DetailCountry from './pages/DetailCountry';\nimport Home from './pages/Home';\n\n// Config\nimport theme from './config/theme';\n\nconst App = () => {\n\treturn (\n\t\t<Router>\n\t\t\t<ThemeProvider theme={theme}>\n\t\t\t\t<Layout>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/details/:alphaCode\" component={DetailCountry} />\n\t\t\t\t\t\t<Route path=\"/\" component={Home} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</Layout>\n\t\t\t</ThemeProvider>\n\t\t</Router>\n\t)\n}\n\nexport default App\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}